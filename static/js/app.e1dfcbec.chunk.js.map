{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","loading","setLoading","working","setWorking","text","setText","toDos","setToDos","editKey","setEditKey","edit","setEdit","useEffect","loadToDos","loadWorking","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","saveWorking","getItem","s","parse","sWorking","editToDo","newToDos","editText","payload","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","Date","now","done","onChangeText","returnKeyType","value","placeholder","input","ActivityIndicator","size","marginTop","ScrollView","Object","keys","map","key","toDo","toDoText","textDecorationLine","autoFocus","editBox","iconBox","hitSlop","top","bottom","left","Fontisto","name","checkToDo","right","Platform","OS","confirm","Alert","alert","deleteToDo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","marginRight","width"],"mappings":"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","file":"static/js/app.e1dfcbec.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  gray: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n  Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst WORKING_KEY = \"@working\";\n\nexport default function App() {\n  const [loading, setLoading] = useState(true);\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [editKey, setEditKey] = useState(\"\");\n  const [edit, setEdit] = useState(\"\");\n  useEffect(() => {\n    loadToDos();\n    loadWorking();\n    setEdit(\"\");\n    setEditKey(\"\");\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const saveWorking = async (working) => {\n    await AsyncStorage.setItem(WORKING_KEY, JSON.stringify(working));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    setLoading(false);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const loadWorking = async () => {\n    const sWorking = await AsyncStorage.getItem(WORKING_KEY);\n    setWorking(JSON.parse(sWorking));\n  };\n  const addToDo = () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, done: false },\n    };\n    setToDos(newToDos);\n    saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  const checkToDo = (key) => {\n    const newToDos = { ...toDos };\n    newToDos[key].done = newToDos[key].done ? false : true;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n  const editToDo = () => {\n    if (edit === \"\") {\n      setEditKey(\"\");\n      setEdit(\"\");\n      return;\n    }\n    const newToDos = { ...toDos };\n    newToDos[editKey].text = edit;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n    setEditKey(\"\");\n    setEdit(\"\");\n  };\n  const editText = (payload) => setEdit(payload);\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity\n          onPress={() => {\n            work();\n            saveWorking(true);\n          }}\n        >\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.gray,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            travel();\n            saveWorking(false);\n          }}\n        >\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? theme.gray : \"white\",\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={\n          working ? \"What do you have to do?\" : \"Where do you want to go?\"\n        }\n        style={styles.input}\n      />\n      {loading ? (\n        <ActivityIndicator\n          color=\"white\"\n          size=\"large\"\n          style={{ marginTop: 200 }}\n        />\n      ) : (\n        <ScrollView>\n          {Object.keys(toDos).map((key) =>\n            toDos[key].working === working ? (\n              <View style={styles.toDo} key={key}>\n                {editKey !== key ? (\n                  <Text\n                    style={\n                      !toDos[key].done\n                        ? styles.toDoText\n                        : {\n                            ...styles.toDoText,\n                            color: theme.gray,\n                            textDecorationLine: \"line-through\",\n                          }\n                    }\n                  >\n                    {toDos[key].text}\n                  </Text>\n                ) : (\n                  <TextInput\n                    autoFocus\n                    onSubmitEditing={editToDo}\n                    onChangeText={editText}\n                    returnKeyType=\"done\"\n                    value={edit}\n                    style={styles.editBox}\n                  />\n                )}\n                <View style={styles.iconBox}>\n                  <TouchableOpacity\n                    hitSlop={{ top: 20, bottom: 20, left: 20 }}\n                    onPress={() => {\n                      setEditKey(key);\n                      setEdit(toDos[key].text);\n                    }}\n                  >\n                    <Fontisto name=\"file-1\" size={24} color={theme.gray} />\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    hitSlop={{ top: 20, bottom: 20 }}\n                    onPress={() => checkToDo(key)}\n                  >\n                    {toDos[key].done ? (\n                      <Fontisto\n                        name=\"checkbox-active\"\n                        size={24}\n                        color={theme.gray}\n                      />\n                    ) : (\n                      <Fontisto\n                        name=\"checkbox-passive\"\n                        size={24}\n                        color={theme.gray}\n                      />\n                    )}\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    hitSlop={{ top: 20, bottom: 20, right: 20 }}\n                    onPress={() => deleteToDo(key)}\n                  >\n                    <Fontisto name=\"trash\" size={18} color={theme.gray} />\n                  </TouchableOpacity>\n                </View>\n              </View>\n            ) : null\n          )}\n        </ScrollView>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    flex: 1,\n    marginRight: 20,\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  iconBox: {\n    width: 80,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  editBox: {\n    flex: 1,\n    marginRight: 20,\n    borderRadius: 10,\n    fontSize: 16,\n    backgroundColor: \"white\",\n  },\n});\n"],"sourceRoot":""}